#!/usr/bin/env bash
# shellcheck source-path=..
set -eo pipefail; shopt -s inherit_errexit
PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/..")
source "$PKGROOT/.upkg/records.sh/records.sh"

main() {
  DOC="cryptenroll-uki - Enroll a LUKS TPM2 key that can be unlocked by a UKI
Usage:
  cryptenroll-uki [options -r PATH... -d PATH...] KEYFILE UKIPATH...

Options:
  -a --hashalg ALG  Which PCR bank to use [default: sha256]
  -e --exclusive    Remove all other TPM2 keys
  -r --record PATH  Additional .pcrlock record files to append
  -d --device PATH  Enroll specific disks (defaults to all LUKS volumes)
  -n --dry-run      Don't actually enroll keys, only show the command
"
# docopt parser below, refresh this parser with `docopt.sh cryptenroll-uki`
# shellcheck disable=2016,2086,2317,1090,1091,2034,2154
docopt() { local v='2.0.2'; source \
"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh" "$v" || { ret=$?;printf -- "exit \
%d\n" "$ret";exit "$ret";};set -e;trimmed_doc=${DOC:0:469};usage=${DOC:71:75}
digest=030be;options=('-a --hashalg 1' '-e --exclusive 0' '-n --dry-run 0' '-r'\
' --record 1' '-d --device 1');node_0(){ value __hashalg 0;};node_1(){ switch \
__exclusive 1;};node_2(){ switch __dry_run 2;};node_3(){ value __record 3 true;}
node_4(){ value __device 4 true;};node_5(){ value KEYFILE a;};node_6(){ value \
UKIPATH a true;};node_7(){ optional 0 1 2 8 9;};node_8(){ repeatable 3;}
node_9(){ repeatable 4;};node_10(){ repeatable 6;};node_11(){ sequence 7 5 10;}
cat <<<' docopt_exit() { [[ -n $1 ]] && printf "%s\n" "$1" >&2;printf "%s\n" \
"${DOC:71:75}" >&2;exit 1;}';local varnames=(__hashalg __exclusive __dry_run \
__record __device KEYFILE UKIPATH) varname;for varname in "${varnames[@]}"; do
unset "var_$varname";done;parse 11 "$@";local p=${DOCOPT_PREFIX:-''};for \
varname in "${varnames[@]}"; do unset "$p$varname";done;if declare -p \
var___record >/dev/null 2>&1; then eval $p'__record=("${var___record[@]}")';else
eval $p'__record=()';fi;if declare -p var___device >/dev/null 2>&1; then eval \
$p'__device=("${var___device[@]}")';else eval $p'__device=()';fi;if declare -p \
var_UKIPATH >/dev/null 2>&1; then eval $p'UKIPATH=("${var_UKIPATH[@]}")';else
eval $p'UKIPATH=()';fi;eval $p'__hashalg=${var___hashalg:-sha256};'$p'__exclus'\
'ive=${var___exclusive:-false};'$p'__dry_run=${var___dry_run:-false};'$p'KEYFI'\
'LE=${var_KEYFILE:-};';local docopt_i=1;[[ $BASH_VERSION =~ ^4.3 ]] && \
docopt_i=2;for ((;docopt_i>0;docopt_i--)); do for varname in "${varnames[@]}"; \
do declare -p "$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/docopt-lib-v$v/docopt-lib.sh"' cryptenroll-uki`
  eval "$(docopt "$@")"

  "$PKGROOT/.upkg/.bin/checkdeps" /lib/systemd/systemd-pcrlock systemd-cryptenroll jq objcopy xxd dd

  if [[ ${#__device[@]} -eq 0 ]]; then
    "$PKGROOT/.upkg/.bin/checkdeps" lsblk
    readarray -t __device < <(lsblk --output FSTYPE,NAME --list --json | jq -r '.blockdevices[] | select(.fstype=="crypto_LUKS") | "/dev/\(.name)"')
    [[ ${#__device[@]} -gt 0 ]] || fatal "No LUKS volumes found with lsblk. You can manually specify devices with --device"
  fi

  local cel secureboot=false
  cel=$(/lib/systemd/systemd-pcrlock cel)
  if type sbctl &>/dev/null; then
    if sbctl status --json | jq -e '.secure_boot' >/dev/null; then
      secureboot=true
    fi
  elif type mokutil &>/dev/null; then
    if [[ $(mokutil --sb-state) = 'SecureBoot enabled' ]]; then
      secureboot=true
    fi
  else
    warning "Unable to find neither sbctl nor mokutil to determine secureboot state, assuming no secureboot"
  fi

  extend_if_present() {
    local pcrlock=$1 index=$2 digest
    # shellcheck disable=SC2154
    jq -re --argjson index "$index" --arg hashAlg "$__hashalg" '[.records[] | select(.pcr==$index) | .digests[] | select(.hashAlg==$hashAlg)] | length == 1' "$pcrlock" >/dev/null || \
      fatal "Failed to find exactly one digest for PCR%s and hash algorithm %s in pcrlock %s" "$index" "$__hashalg" "$pcrlock"
    digest=$(jq -r --argjson index "$index" --arg hashAlg "$__hashalg" '.records[] | select(.pcr==$index) | .digests[] | select(.hashAlg==$hashAlg) | .digest' "$pcrlock")
    if jq -re --argjson index "$index" --arg hashAlg "$__hashalg" --arg digest "$digest" \
      '[.[] | select(.pcr==$index) | .digests[] | contains({"hashAlg": $hashAlg, "digest": $digest})] | any' <<<"$cel" >/dev/null; then
      records=$(jq --argjson records "$records" '$records + .records' "$pcrlock")
    fi
  }

  local wipe_opt='--wipe-slot=tpm2'
  # shellcheck disable=SC2154
  $__exclusive || wipe_opt=
  local uki_path
  for uki_path in "${UKIPATH[@]}"; do
    local records='[]'
    extend_if_present /usr/lib/pcrlock.d/350-action-efi-application.pcrlock 4
    records=$(jq --argjson records "$records" '$records + .records' /usr/lib/pcrlock.d/500-separator.pcrlock.d/300-0x00000000.pcrlock)
    records=$(jq --argjson records "$records" '$records + .records' <(/lib/systemd/systemd-pcrlock lock-uki "$uki_path"))
    $secureboot || records=$(jq --argjson records "$records" '$records + .records' <(lock_vmlinuz "$uki_path"))
    records=$(jq --argjson records "$records" '$records + .records' /usr/lib/pcrlock.d/750-enter-initrd.pcrlock)
    local record_path
    # shellcheck disable=SC2154
    for record_path in "${__record[@]}"; do
      records=$(jq -re --argjson records "$records" '$records + .records' "$record_path")
    done

    local pcr4 pcr11
    pcr4=$(calc_pcr "$records" 4 "$__hashalg")
    pcr11=$(calc_pcr "$records" 11 "$__hashalg")

    local tmp_keyfile
    tmp_keyfile=$(mktemp)
    # shellcheck disable=SC2064
    trap "rm -f \"$tmp_keyfile\"" EXIT
    # Copy the keyfile contents (in case KEYFILE is an fd)
    cat "$KEYFILE" >"$tmp_keyfile"

    local cmd="echo systemd-cryptenroll"
    # shellcheck disable=SC2154
    $__dry_run || cmd=systemd-cryptenroll
    for dev in "${__device[@]}"; do
      $cmd --unlock-key-file "$tmp_keyfile" \
        --tpm2-device=auto $wipe_opt \
        --tpm2-pcrs="0+2+4:$__hashalg=$pcr4+11:$__hashalg=$pcr11" \
        "$dev"
    done
    wipe_opt=
  done
}

lock_vmlinuz() {
  local uki_path=$1
  # See https://github.com/systemd/systemd/issues/36076
  local kernel_tmp raw_size
  kernel_tmp=$(mktemp -d)
  # shellcheck disable=SC2064
  trap "rm -rf '$kernel_tmp'" EXIT
  objcopy -O binary --only-section=.linux "$uki_path" "$kernel_tmp/linux"
  raw_size=$(stat -c%s "$kernel_tmp/linux") # not the original size of vmlinuz, it's already padded a bit, but we need to pad *mooore*
  local paddr virtual_size _idx _name _rest
  read -r _idx _name paddr _rest < <(objdump -P sections "$uki_path" | grep -F .linux) || \
    fatal "Unable to find .linux section in UKI"
  virtual_size=$(printf "%d" "0x$paddr")
  dd if=/dev/zero bs=1 status=none count=$((virtual_size-raw_size)) conv=notrunc oflag=append of="$kernel_tmp/linux"
  /lib/systemd/systemd-pcrlock lock-pe "$kernel_tmp/linux"
  rm -rf "$kernel_tmp"
  trap '' EXIT
}

calc_pcr() {
  local records=$1 index=$2 hash_alg=$3 pcr digest
  shift; shift
  case $hash_alg in
    sha1) pcr=$(printf '0%.0s' {1..40}) ;;
    sha256) pcr=$(printf '0%.0s' {1..64}) ;;
    sha384) pcr=$(printf '0%.0s' {1..96}) ;;
    sha512) pcr=$(printf '0%.0s' {1..128}) ;;
  esac
  verbose "Calculating %s chain for PCR%s" "$hash_alg" "$index"
  for digest in $(jq -r --argjson index "$index" --arg hashAlg "$hash_alg" \
    '.[] | select(.pcr==$index) | .digests[] | select(.hashAlg==$hashAlg) | .digest' <<<"$records"); do
    verbose "%s: %s" "$index" "$digest"
    pcr=$( (xxd -r -p <<<"${pcr}${digest}") | "${hash_alg}sum" | cut -d' ' -f1)
  done
  printf "%s\n" "$pcr"
}

main "$@"
